const int kernelSize = 23;
const int halfSize = kernelSize / 2;

const float kernel[529] = float[](
0.001632, 0.001665, 0.001695, 0.001722, 0.001747,
0.001769, 0.001787, 0.001802, 0.001814, 0.001823,
0.001828, 0.001830, 0.001828, 0.001823, 0.001814,
0.001802, 0.001787, 0.001769, 0.001747, 0.001722,
0.001695, 0.001665, 0.001632, 0.001665, 0.001698,
0.001729, 0.001757, 0.001782, 0.001804, 0.001823,
0.001838, 0.001851, 0.001859, 0.001865, 0.001866,
0.001865, 0.001859, 0.001851, 0.001838, 0.001823,
0.001804, 0.001782, 0.001757, 0.001729, 0.001698,
0.001665, 0.001695, 0.001729, 0.001760, 0.001789,
0.001814, 0.001837, 0.001856, 0.001872, 0.001884,
0.001893, 0.001899, 0.001900, 0.001899, 0.001893,
0.001884, 0.001872, 0.001856, 0.001837, 0.001814,
0.001789, 0.001760, 0.001729, 0.001695, 0.001722,
0.001757, 0.001789, 0.001818, 0.001844, 0.001866,
0.001886, 0.001902, 0.001915, 0.001924, 0.001929,
0.001931, 0.001929, 0.001924, 0.001915, 0.001902,
0.001886, 0.001866, 0.001844, 0.001818, 0.001789,
0.001757, 0.001722, 0.001747, 0.001782, 0.001814,
0.001844, 0.001870, 0.001893, 0.001913, 0.001929,
0.001942, 0.001951, 0.001957, 0.001959, 0.001957,
0.001951, 0.001942, 0.001929, 0.001913, 0.001893,
0.001870, 0.001844, 0.001814, 0.001782, 0.001747,
0.001769, 0.001804, 0.001837, 0.001866, 0.001893,
0.001917, 0.001937, 0.001953, 0.001966, 0.001975,
0.001981, 0.001983, 0.001981, 0.001975, 0.001966,
0.001953, 0.001937, 0.001917, 0.001893, 0.001866,
0.001837, 0.001804, 0.001769, 0.001787, 0.001823,
0.001856, 0.001886, 0.001913, 0.001937, 0.001957,
0.001974, 0.001987, 0.001996, 0.002002, 0.002004,
0.002002, 0.001996, 0.001987, 0.001974, 0.001957,
0.001937, 0.001913, 0.001886, 0.001856, 0.001823,
0.001787, 0.001802, 0.001838, 0.001872, 0.001902,
0.001929, 0.001953, 0.001974, 0.001990, 0.002004,
0.002013, 0.002019, 0.002021, 0.002019, 0.002013,
0.002004, 0.001990, 0.001974, 0.001953, 0.001929,
0.001902, 0.001872, 0.001838, 0.001802, 0.001814,
0.001851, 0.001884, 0.001915, 0.001942, 0.001966,
0.001987, 0.002004, 0.002017, 0.002026, 0.002032,
0.002034, 0.002032, 0.002026, 0.002017, 0.002004,
0.001987, 0.001966, 0.001942, 0.001915, 0.001884,
0.001851, 0.001814, 0.001823, 0.001859, 0.001893,
0.001924, 0.001951, 0.001975, 0.001996, 0.002013,
0.002026, 0.002036, 0.002042, 0.002044, 0.002042,
0.002036, 0.002026, 0.002013, 0.001996, 0.001975,
0.001951, 0.001924, 0.001893, 0.001859, 0.001823,
0.001828, 0.001865, 0.001899, 0.001929, 0.001957,
0.001981, 0.002002, 0.002019, 0.002032, 0.002042,
0.002048, 0.002050, 0.002048, 0.002042, 0.002032,
0.002019, 0.002002, 0.001981, 0.001957, 0.001929,
0.001899, 0.001865, 0.001828, 0.001830, 0.001866,
0.001900, 0.001931, 0.001959, 0.001983, 0.002004,
0.002021, 0.002034, 0.002044, 0.002050, 0.002052,
0.002050, 0.002044, 0.002034, 0.002021, 0.002004,
0.001983, 0.001959, 0.001931, 0.001900, 0.001866,
0.001830, 0.001828, 0.001865, 0.001899, 0.001929,
0.001957, 0.001981, 0.002002, 0.002019, 0.002032,
0.002042, 0.002048, 0.002050, 0.002048, 0.002042,
0.002032, 0.002019, 0.002002, 0.001981, 0.001957,
0.001929, 0.001899, 0.001865, 0.001828, 0.001823,
0.001859, 0.001893, 0.001924, 0.001951, 0.001975,
0.001996, 0.002013, 0.002026, 0.002036, 0.002042,
0.002044, 0.002042, 0.002036, 0.002026, 0.002013,
0.001996, 0.001975, 0.001951, 0.001924, 0.001893,
0.001859, 0.001823, 0.001814, 0.001851, 0.001884,
0.001915, 0.001942, 0.001966, 0.001987, 0.002004,
0.002017, 0.002026, 0.002032, 0.002034, 0.002032,
0.002026, 0.002017, 0.002004, 0.001987, 0.001966,
0.001942, 0.001915, 0.001884, 0.001851, 0.001814,
0.001802, 0.001838, 0.001872, 0.001902, 0.001929,
0.001953, 0.001974, 0.001990, 0.002004, 0.002013,
0.002019, 0.002021, 0.002019, 0.002013, 0.002004,
0.001990, 0.001974, 0.001953, 0.001929, 0.001902,
0.001872, 0.001838, 0.001802, 0.001787, 0.001823,
0.001856, 0.001886, 0.001913, 0.001937, 0.001957,
0.001974, 0.001987, 0.001996, 0.002002, 0.002004,
0.002002, 0.001996, 0.001987, 0.001974, 0.001957,
0.001937, 0.001913, 0.001886, 0.001856, 0.001823,
0.001787, 0.001769, 0.001804, 0.001837, 0.001866,
0.001893, 0.001917, 0.001937, 0.001953, 0.001966,
0.001975, 0.001981, 0.001983, 0.001981, 0.001975,
0.001966, 0.001953, 0.001937, 0.001917, 0.001893,
0.001866, 0.001837, 0.001804, 0.001769, 0.001747,
0.001782, 0.001814, 0.001844, 0.001870, 0.001893,
0.001913, 0.001929, 0.001942, 0.001951, 0.001957,
0.001959, 0.001957, 0.001951, 0.001942, 0.001929,
0.001913, 0.001893, 0.001870, 0.001844, 0.001814,
0.001782, 0.001747, 0.001722, 0.001757, 0.001789,
0.001818, 0.001844, 0.001866, 0.001886, 0.001902,
0.001915, 0.001924, 0.001929, 0.001931, 0.001929,
0.001924, 0.001915, 0.001902, 0.001886, 0.001866,
0.001844, 0.001818, 0.001789, 0.001757, 0.001722,
0.001695, 0.001729, 0.001760, 0.001789, 0.001814,
0.001837, 0.001856, 0.001872, 0.001884, 0.001893,
0.001899, 0.001900, 0.001899, 0.001893, 0.001884,
0.001872, 0.001856, 0.001837, 0.001814, 0.001789,
0.001760, 0.001729, 0.001695, 0.001665, 0.001698,
0.001729, 0.001757, 0.001782, 0.001804, 0.001823,
0.001838, 0.001851, 0.001859, 0.001865, 0.001866,
0.001865, 0.001859, 0.001851, 0.001838, 0.001823,
0.001804, 0.001782, 0.001757, 0.001729, 0.001698,
0.001665, 0.001632, 0.001665, 0.001695, 0.001722,
0.001747, 0.001769, 0.001787, 0.001802, 0.001814,
0.001823, 0.001828, 0.001830, 0.001828, 0.001823,
0.001814, 0.001802, 0.001787, 0.001769, 0.001747,
0.001722, 0.001695, 0.001665, 0.001632
);

vec4 gaussian_blur(sampler2D inputTex, vec2 texcoord, float radius, float mip)
{
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

	// Get the texture size in pixels
    vec2 texture_size = vec2(textureSize(inputTex, 0));

	// Calculate the texel size (1 pixel in UV space)
    vec2 texelSize = 1.0 / texture_size;

	// Convolution: Sample texture around current pixel and weight by kernel
    for (int y = -halfSize; y <= halfSize; y++)
    {
        for (int x = -halfSize; x <= halfSize; x++)
        {
            // Calculate kernel index (flatten 2D to 1D)
            int index = (y + halfSize) * kernelSize + (x + halfSize);

            // Sample texture at offset position
            vec2 offset = vec2(float(x), float(y)) * texelSize;
			vec4 sample = textureLod(inputTex, texcoord + (offset * radius), mip);

            // Add weighted sample to result
            color += sample * kernel[index];
        }
    }

	return color;
}